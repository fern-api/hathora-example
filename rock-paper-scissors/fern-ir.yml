# Fern Intermediate Representation (IR) is similar to the raw fern.yml format
# except it contains an `encoding` key that determines how the types will be
# encoded over the wire. By default, JSON is used.

encoding: hathora-binary

ids:
  UserId: string
  StateId: string
types: 
  Gesture:
    enum:  
	    - ROCK 
	    - PAPER
	    - SCISSOR
  PlayerInfo: 
    fields: 
	    id: UserId
	    score: integer
	    gesture: optional<Gesture>
  PlayerState:
    fields: 
      round: integer
	    player1: optional<PlayerInfo>
			player2: optional<PlayerInfo>
	UserState: PlayerState
  UserStateUpdate:
    extends: PlayerState
    properties:
      stateId: StateId
      # TODO: Hathora also sends the user ID on every state update. Â¿Por que?

channels:
  websocket:
    RockPaperScissorsChannel:
      path: /hathora/3891-293-1232-2123-1232-1132
      messages:
        initialize: 
          origin: client
          # before going over the wire, this PlayerState is encoded
          # using hathora-binary, which could be a snapshot or a diff,
          # i.e. depending on the first bit. The client will also use
          # hathora-binary to decode this message.
          response:
            type: UserStateUpdate
            behavior: request-response
        joinGame:
          origin: client
          response:
            type: UserStateUpdate
            behavior: request-response
        chooseGesture: 
          origin: client
          body: Gesture
          response:
            type: UserStateUpdate
            behavior: request-response
        nextRound:
          origin: client
          response:
            type: UserStateUpdate
            behavior: request-response
  