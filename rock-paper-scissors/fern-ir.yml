# Fern Intermediate Representation (IR) is similar to the raw fern.yml format
# except it contains an `encoding` key that determines how the types will be
# encoded over the wire. By default, JSON is used.

encoding: hathora-binary

ids:
  UserId: string
  StateId: string
types:
  Gesture:
    enum:
      - ROCK
      - PAPER
      - SCISSOR
  PlayerInfo:
    fields:
      id: UserId
      score: integer
      gesture: optional<Gesture>
  PlayerState:
    fields:
      round: integer
      player1: optional<PlayerInfo>
      player2: optional<PlayerInfo>
	UserState: PlayerState
  InitializeRequest: {}
  CreateRoomResponse: 
    fields: 
      stateId: StateId


services: 
  http: 
    MatchMakingService: 
      base-path: /3891-293-1232-2123-1232-1132
      endpoints: 
        createRoom: 
          method: POST
          auth: bearer
          path: /create
          request: InitializeRequest
          response: CreateRoomResponse
    AnonymousLoginService: 
      base-path: /3891-293-1232-2123-1232-1132
      endpoints: 
        loginAnonymous: 
          method: POST
          path: /login/anonymous
          request: {}
          response: 
            properties: 
              token: string

channels:
  websocket:
    RockPaperScissorsClientChannel:
      path: /3891-293-1232-2123-1232-1132
      messages:
        initialize:
          origin: client
          body: InitializeRequest
          response:
            type: UserState
            behavior: request-response
          # before going over the wire, UserState is encoded
          # using hathora-binary, which could be a snapshot or a diff,
          # i.e. depending on the first bit. The client will also use
          # hathora-binary to decode this message.
        joinGame:
          origin: client
          body: UserStateInfo
          response:
            type: UserState
            behavior: request-response
        chooseGesture:
          origin: client
          body: ChooseGestureBody
          response:
            type: UserState
            behavior: request-response
        nextRound:
          origin: client
          body: UserStateInfo
          response:
            type: UserState
            behavior: request-response
        connect: 
          origin: client
          body: 
            properties: 
              token: string
              stateId: string # Should this be a bigint or int? 
        findMatch: 
          origin: client
          body: 
            properties: 
              token: string
              numPlayers: integer
              request: InitializeRequest
          responses: 
            body: 
              fields: 
                matched: boolean
                stateId: optional<StateId>
            behavior: subscription
